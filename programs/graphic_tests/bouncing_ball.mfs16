jp start;

vram_start = 0x0100_0000:d;
vram_size = 0x0002_5800:d;
vram_end = 0x0102_5800:d;

ie_register_addr = 0xFFFF_FFFE:d;

row_len = 0x140:d; // 320 bytes (640 pixels)
col_len = 0xF0:d; // 240 bytes (480 pixels)

ball_colour = 0xCCCC:w;
dark_colour_offset = 0x8888:w;

up_left = 0:b;
up_right = 1:b;
down_left = 2:b;
down_right = 3:b;

// Frame interrupt handler. Do nothing.
0x100:d:
reti;

start:
// Only enable frame interrupts
ld B0,0x01:b;
ld HL,ie_register_addr;
ld A,[HL];
or A0,B0;
ld [HL],A;

// Set random starting location
ld BC,vram_size;
rand HL;
divu HL,BC;
ld HL,BC;
add HL,vram_start;

// Set ball colours
ld A,ball_colour;
ld B,A;
sub B,dark_colour_offset;

// Set E0 = random direction
// 0 = up+left
// 1 = up+right
// 2 = down+left
// 3 = down+right
rand E1;
ld E0,4:b;
divu E1,E0;

// Enable interrupts
ei;

// Start bouncing!
main_bouncing_loop:
    // Clear old ball
    push BC;
    ld C,A;
    ld A,0:w;
    ld B,0:w;
    call draw_ball;
    ld A,C;
    pop BC;

    // Check "hitbox" and change direction if necessary
    call check_bounce;

    // Move the ball's centrepoint
    call move_hl;

    // Draw new ball
    call draw_ball;

    // Wait until next frame interrupt
    halt;
    halt;
jp main_bouncing_loop;


// Move HL according to the current direction
// Arg HL = current centrepoint of ball
// Arg E0 = current direction
move_hl:
    cmp E0,up_left;
    jpz mv_up_left;
    cmp E0,up_right;
    jpz mv_up_right;
    cmp E0,down_left;
    jpz mv_down_left;

    mv_down_right:
        add HL,row_len;
        inc HL;
    jp finish_move_hl_switch;

    mv_down_left:
        add HL,row_len;
        dec HL;
    jp finish_move_hl_switch;

    mv_up_right:
        sub HL,row_len;
        inc HL;
    jp finish_move_hl_switch;

    mv_up_left:
        sub HL,row_len;
        dec HL;
    jp finish_move_hl_switch;

    finish_move_hl_switch:
ret;

// Check if the 28x28 ball should bounce based on the current direction
// Change the current direction if necessary
// Arg HL = current centrepoint of ball
// Arg E0 = current direction
//          0 = up+left
//          1 = up+right
//          2 = down+left
//          3 = down+right
check_bounce:
    dist_to_up = 8:d;
    dist_to_left = 6:d;
    dist_to_down = 20:d;
    dist_to_right = 8:d;

    push BC;
    push HL;

    cmp E0,up_left;
    jpz bounce_up_left;
    cmp E0,up_right;
    jpz bounce_up_right;
    cmp E0,down_left;
    jpz bounce_down_left;

    bounce_down_right:
        // if HL + dist_to_right > end of row, set direction = down_left
        call get_row_end;
        add HL,dist_to_right;
        cmp BC,HL;
        jpn set_down_left;

        // if HL + dist_to_down >= end of vram, set direction = up_right
        pop HL;
        push HL;
        ld BC,dist_to_down;
        mulu BC,row_len;
        add HL,BC;
        cmp HL,vram_end;
        jnn set_up_right;

    jp finish_bounce_switch;

    bounce_down_left:
        // if HL - dist_to_left < start of row, set direction = down_right
        call get_row_start;
        sub HL,dist_to_left;
        cmp HL,BC;
        jpn set_down_right;

        // if HL + dist_to_down >= end of vram, set direction = up_left
        pop HL;
        push HL;
        ld BC,dist_to_down;
        mulu BC,row_len;
        add HL,BC;
        cmp HL,vram_end;
        jnn set_up_left;
    jp finish_bounce_switch;

    bounce_up_right:
        // if HL + dist_to_right > end of row, set direction = up_left
        call get_row_end;
        add HL,dist_to_right;
        cmp BC,HL;
        jpn set_up_left;

        // if HL - dist_to_up < start of vram, set direction = down_right
        pop HL;
        push HL;
        ld BC,dist_to_up;
        mulu BC,row_len;
        sub HL,BC;
        cmp HL,vram_start;
        jpn set_down_right;
    jp finish_bounce_switch;

    bounce_up_left:
        // if HL - dist_to_left < start of row, set direction = up_right
        call get_row_start;
        sub HL,dist_to_left;
        cmp HL,BC;
        jpn set_up_right;

        // if HL - dist_to_up < start of vram, set direction = down_left
        pop HL;
        push HL;
        ld BC,dist_to_up;
        mulu BC,row_len;
        sub HL,BC;
        cmp HL,vram_start;
        jpn set_down_left;
    jp finish_bounce_switch;

    set_down_left:
        ld E0,down_left;
    jp finish_bounce_switch;

    set_down_right:
        ld E0,down_right;
    jp finish_bounce_switch;

    set_up_right:
        ld E0,up_right;
    jp finish_bounce_switch;

    set_up_left:
        ld E0,up_left;
    jp finish_bounce_switch;

    finish_bounce_switch:

    pop HL;
    pop BC;
ret;


// Draw the ball centred around HL
// Arg A = ball colour
// Arg B = dark ball colour
// Arg HL = ball centre index
draw_ball:
    push HL;
    push DE;
    push BC;
    
    /*
    This, vstretched x2
    0011100
    0011100
    0111110
    0111110
    1111111
    1111111
    1111111
    1111112
    1111112
    2111122
    2211122
    0222220
    0222220
    0022200
    0022200
    */

    ld DE,row_len;

    // Position "cursor" at top-left then start drawing
    sub HL,DE;
    sub HL,DE;
    sub HL,DE;
    sub HL,DE;
    sub HL,DE;
    sub HL,DE;
    sub HL,DE;
    dec HL;

    ldi [HL],A;
    ldi [HL],A;
    ld [HL],A;
    add HL,DE;

    ldd [HL],A;
    ldd [HL],A;
    ld [HL],A;
    add HL,DE;

    ldi [HL],A;
    ldi [HL],A;
    ld [HL],A;
    add HL,DE;

    ldd [HL],A;
    ldd [HL],A;
    ldd [HL],A;
    add HL,DE;

    ldi [HL],A;
    ldi [HL],A;
    ldi [HL],A;
    ldi [HL],A;
    ld [HL],A;
    add HL,DE;

    ldd [HL],A;
    ldd [HL],A;
    ldd [HL],A;
    ldd [HL],A;
    ld [HL],A;
    add HL,DE;

    ldi [HL],A;
    ldi [HL],A;
    ldi [HL],A;
    ldi [HL],A;
    ld [HL],A;
    add HL,DE;

    ldd [HL],A;
    ldd [HL],A;
    ldd [HL],A;
    ldd [HL],A;
    ldd [HL],A;
    add HL,DE;

    ldi [HL],A;
    ldi [HL],A;
    ldi [HL],A;
    ldi [HL],A;
    ldi [HL],A;
    ldi [HL],A;
    ld [HL],A;
    add HL,DE;

    ldd [HL],A;
    ldd [HL],A;
    ldd [HL],A;
    ldd [HL],A;
    ldd [HL],A;
    ldd [HL],A;
    ld [HL],A;
    add HL,DE;

    ldi [HL],A;
    ldi [HL],A;
    ldi [HL],A;
    ldi [HL],A;
    ldi [HL],A;
    ldi [HL],A;
    call swap_colour;
    ld [HL],A;
    add HL,DE;

    ldd [HL],A;
    call swap_colour;
    ldd [HL],A;
    ldd [HL],A;
    ldd [HL],A;
    ldd [HL],A;
    ldd [HL],A;
    ld [HL],A;
    add HL,DE;

    ldi [HL],A;
    ldi [HL],A;
    ldi [HL],A;
    ldi [HL],A;
    ldi [HL],A;
    ldi [HL],A;
    call swap_colour;
    ld [HL],A;
    add HL,DE;

    ldd [HL],A;
    call swap_colour;
    ldd [HL],A;
    ldd [HL],A;
    ldd [HL],A;
    ldd [HL],A;
    ldd [HL],A;
    ld [HL],A;
    add HL,DE;

    ldi [HL],A;
    ldi [HL],A;
    ldi [HL],A;
    ldi [HL],A;
    ldi [HL],A;
    ldi [HL],A;
    call swap_colour;
    ld [HL],A;
    add HL,DE;

    ldd [HL],A;
    call swap_colour;
    ldd [HL],A;
    ldd [HL],A;
    ldd [HL],A;
    ldd [HL],A;
    ldd [HL],A;
    ld [HL],A;
    add HL,DE;

    call swap_colour;
    ldi [HL],A;
    call swap_colour;
    ldi [HL],A;
    ldi [HL],A;
    ldi [HL],A;
    ldi [HL],A;
    call swap_colour;
    ldi [HL],A;
    ld [HL],A;
    add HL,DE;

    ldd [HL],A;
    ldd [HL],A;
    call swap_colour;
    ldd [HL],A;
    ldd [HL],A;
    ldd [HL],A;
    ldd [HL],A;
    call swap_colour;
    ld [HL],A;
    add HL,DE;

    ldi [HL],A;
    ldi [HL],A;
    call swap_colour;
    ldi [HL],A;
    ldi [HL],A;
    ldi [HL],A;
    call swap_colour;
    ldi [HL],A;
    ld [HL],A;
    add HL,DE;

    ldd [HL],A;
    ldd [HL],A;
    call swap_colour;
    ldd [HL],A;
    ldd [HL],A;
    ldd [HL],A;
    call swap_colour;
    ldd [HL],A;
    ld [HL],A;
    add HL,DE;
    inc HL;
    inc HL;

    ldi [HL],A;
    ldi [HL],A;
    ldi [HL],A;
    ldi [HL],A;
    ld [HL],A;
    add HL,DE;

    ldd [HL],A;
    ldd [HL],A;
    ldd [HL],A;
    ldd [HL],A;
    ld [HL],A;
    add HL,DE;

    ldi [HL],A;
    ldi [HL],A;
    ldi [HL],A;
    ldi [HL],A;
    ld [HL],A;
    add HL,DE;

    ldd [HL],A;
    ldd [HL],A;
    ldd [HL],A;
    ldd [HL],A;
    ld [HL],A;
    add HL,DE;
    inc HL;
    inc HL;

    ldi [HL],A;
    ldi [HL],A;
    ld [HL],A;
    add HL,DE;

    ldd [HL],A;
    ldd [HL],A;
    ld [HL],A;
    add HL,DE;

    ldi [HL],A;
    ldi [HL],A;
    ld [HL],A;
    add HL,DE;

    ldd [HL],A;
    ldd [HL],A;
    ld [HL],A;

    call swap_colour;

    pop BC;
    pop DE;
    pop HL;
ret;

// set A = B using C as a middleman
// arg A: current colour
// arg B: colour to swap to
// arg C: unused reg
swap_colour:
    ld C,A;
    ld A,B;
    ld B,C;
ret;

// Get the start of the row HL is on.
// Set BC = start of row
get_row_start:
    push HL;

    ld BC,HL;
    sub BC,vram_start;
    divu BC,row_len;
    sub HL,BC;
    ld BC,HL;

    pop HL;
ret;

// Get the end of the row HL is on.
// Set BC = end of row
get_row_end:
    push HL;

    add HL,row_len;
    call get_row_start;
    dec BC;

    pop HL;
ret;
