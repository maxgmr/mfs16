ie_register_addr = 0xFFFF_FFFE:d;

bg_data_start = 0x0088_0000:d;
bg_data_end = 0x008A_5800:d;

vram_bg_data_offset = 0x0078_0000:d;

vram_start = 0x0100_0000:d;
vram_end = 0x0102_5800:d;

row_len = 0x140:d;
col_len = 0xF0:d;

my_colour = 0xDDDD_DDDD:d;
my_speed = 1:d;

bg_colour = 0x2222:w;
lbg_colour = 0xAAAA:w;
w_colour = 0x4444:w;

jp entry_point;

// Frame interrupt handler
0x100:d:
    call move_character;
reti;

entry_point:
    call enable_fri;
    call prompt_user_start;
    call load_bg;
    call draw_bg;
    call spawn_in_centre;
    call draw_character;
    ei;
    
main_loop:
    halt;
jp main_loop;

prompt_user_start:
    // TODO
ret;

load_bg:
    push DE;
    push BC;

    ld DE,bg_data_start;

    load_bg_loop:

    rand B;
    cmp 0xC000:w,B;
    jpn draw_lbg;
    ld C,bg_colour;
    jp colour_pick_done;
    draw_lbg:
    ld C,lbg_colour;
    colour_pick_done:

    ldi [DE],C;

    cmp DE,bg_data_end;
    jpn load_bg_loop;
    load_bg_loop_end:

    pop BC;
    pop DE;
ret;

draw_bg:
    push HL;
    push DE;
    push BC;
    
    ld HL,vram_start;
    ld DE,bg_data_start;

    draw_bg_loop:

    ldi B,[DE];
    ldi [HL],B;

    cmp HL,vram_end;
    jpn draw_bg_loop;
    draw_bg_loop_end:

    pop BC;
    pop DE;
    pop HL;
ret;

move_character:
    push BC;
    call erase_character;

    // Check up/w/k
    ld C,kb_k;
    call check_scancode;
    jnz is_up;
    ld C,kb_w;
    call check_scancode;
    jnz is_up;
    ld C,kb_up;
    call check_scancode;
    jpz not_up;
    is_up:
    ld BC,row_len;
    mulu BC,my_speed;
    mulu BC,2:d;
    sub DE,BC;
    jp done;
    not_up:

    // Check down/s/j
    ld C,kb_j;
    call check_scancode;
    jnz is_down;
    ld C,kb_s;
    call check_scancode;
    jnz is_down;
    ld C,kb_down;
    call check_scancode;
    jpz not_down;
    is_down:
    ld BC,row_len;
    mulu BC,my_speed;
    mulu BC,2:d;
    add DE,BC;
    jp done;
    not_down:

    // Check left/a/h
    ld C,kb_h;
    call check_scancode;
    jnz is_left;
    ld C,kb_a;
    call check_scancode;
    jnz is_left;
    ld C,kb_left;
    call check_scancode;
    jpz not_left;
    is_left:
    ld BC,my_speed;
    sub DE,BC;
    jp done;
    not_left:

    // Check right/d/l
    ld C,kb_l;
    call check_scancode;
    jnz is_right;
    ld C,kb_d;
    call check_scancode;
    jnz is_right;
    ld C,kb_right;
    call check_scancode;
    jpz not_right;
    is_right:
    ld BC,my_speed;
    add DE,BC;
    not_right:

    done:
    call draw_character;
    pop BC;
ret;

erase_character:
    push HL;
    push DE;
    push BC;

    // Read background colour data at location of character
    ld HL,DE;
    sub HL,vram_bg_data_offset;

    ld C,[HL];
    inc HL;
    ld B,[HL];
    dec HL;
    vld [DE],BC;
    add DE,row_len;
    add HL,row_len;

    ld C,[HL];
    inc HL;
    ld B,[HL];
    dec HL;
    vld [DE],BC;
    add DE,row_len;
    add HL,row_len;

    ld C,[HL];
    inc HL;
    ld B,[HL];
    dec HL;
    vld [DE],BC;
    add DE,row_len;
    add HL,row_len;

    ld C,[HL];
    inc HL;
    ld B,[HL];
    dec HL;
    vld [DE],BC;
    add DE,row_len;
    add HL,row_len;

    ld C,[HL];
    inc HL;
    ld B,[HL];
    dec HL;
    vld [DE],BC;
    add DE,row_len;
    add HL,row_len;

    ld C,[HL];
    inc HL;
    ld B,[HL];
    dec HL;
    vld [DE],BC;
    add DE,row_len;
    add HL,row_len;

    ld C,[HL];
    inc HL;
    ld B,[HL];
    dec HL;
    vld [DE],BC;
    add DE,row_len;
    add HL,row_len;

    ld C,[HL];
    inc HL;
    ld B,[HL];
    dec HL;
    vld [DE],BC;
    add DE,row_len;
    add HL,row_len;

    pop BC;
    pop DE;
    pop HL;
ret;

draw_character:
    push DE;
    push BC;
    
    ld BC,my_colour;

    vld [DE],BC;
    add DE,row_len;
    vld [DE],BC;
    add DE,row_len;
    vld [DE],BC;
    add DE,row_len;
    vld [DE],BC;
    add DE,row_len;
    vld [DE],BC;
    add DE,row_len;
    vld [DE],BC;
    add DE,row_len;
    vld [DE],BC;
    add DE,row_len;
    vld [DE],BC;

    pop BC;
    pop DE;
ret;

// Move DE to centre of screen.
spawn_in_centre:
    push BC;
    push HL;

    // Move to centre Y
    ld DE,row_len;
    ld HL,col_len;
    divu HL,2:d;
    mulu DE,HL;
    
    // Move to centre X
    ld HL,row_len;
    divu HL,2:d;
    add DE,HL;

    add DE,vram_start;

    pop HL;
    pop BC;
ret;

enable_fri:
    push BC;
    ld BC,ie_register_addr;
    ld [BC],0b0000_0001:w;
    pop BC;
ret;
