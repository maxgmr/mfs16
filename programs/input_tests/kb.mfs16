// CONSTANTS
ie_register_addr = 0xFFFF_FFFE:d;
kb_register_start = 0xFFFF_FFBE:d;
screen_start = 0x0100_0000:d;
row_len = 0x140:d;
col_len = 0xF0:d;
half_row_len = 0xA0:d;
half_col_len = 0x78:d;

jp entry_point;

// Frame interrupt handler
0x100:d:
    stop;
reti;
// Keyboard interrupt handler
0x200:d:
    call update_graphics;
reti;

entry_point:
    // Enable only keyboard interrupts
    call enable_only_kbi;
    // Enable interrupts
    ei;

main_loop:
    halt;
jp main_loop;

enable_only_kbi:
    push BC;
    ld BC,ie_register_addr;
    ld [BC],0x02:w;
    pop BC;
ret;

update_graphics:
    push BC;
    push HL;
    
    ld HL,screen_start;

    ld C,q;
    call update_key;
    ld C,w;
    call update_key;
    ld C,e;
    call update_key;
    ld C,r;
    call update_key;
    ld C,t;
    call update_key;
    ld C,y;
    call update_key;
    ld C,u;
    call update_key;
    ld C,i;
    call update_key;
    ld C,o;
    call update_key;
    ld C,p;
    call update_key;

    call next_row;

    ld C,a;
    call update_key;
    ld C,s;
    call update_key;
    ld C,d;
    call update_key;
    ld C,f;
    call update_key;
    ld C,g;
    call update_key;
    ld C,h;
    call update_key;
    ld C,j;
    call update_key;
    ld C,k;
    call update_key;
    ld C,l;
    call update_key;

    call next_row;

    ld C,z;
    call update_key;
    ld C,x;
    call update_key;
    ld C,c;
    call update_key;
    ld C,v;
    call update_key;
    ld C,b;
    call update_key;
    ld C,n;
    call update_key;
    ld C,m;
    call update_key;

    pop HL;
    pop BC;
ret;

update_key:
    call check_scancode;

    jpz px_off;

    px_on:
        ld D,0x00FF:w;
    jp px_done;
    px_off:
        ld D,0x0000:w;
    px_done:

    ldi [HL],D;
ret;

next_row:
    push BC;
    push DE;

    ld DE,HL;
    sub DE,screen_start;
    divu DE,row_len;
    sub HL,BC;

    add HL,row_len;
    add HL,row_len;

    pop DE;
    pop BC;
ret;
