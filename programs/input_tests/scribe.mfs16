// CONSTANTS
data_start_addr = 0x80_0000:d;
screen_start = 0x0100_0000:d;
screen_end = 0x0102_5800:d;
last_row_end = 0x0102_4CBD:d;
ie_register_addr = 0xFFFF_FFFE:d;
enable_man_frame_addr = 0xFFFF_FFBD:d;
man_frame_update_addr = 0xFFFF_FFBB:d;

row_len = 0x140:d;
col_len = 0xF0:d;
half_row_len = 0xA0:d;
half_col_len = 0x78:d;

num_rows = 53:d; // 480 pixels / 9 pixels per row
num_chars = 106:d; // 640 pixels / 6 pixels per char

colour = 0xFFFF_FFFF:d;

jp entry_point;

// Frame interrupt handler
0x100:d:
    clv;
    call draw_screen;
    // Send manual frame update
    ld [man_frame_update_addr],A;
reti;

// Keyboard interrupt handler
0x200:d:
    call handle_input;
reti;

entry_point:
    // Enable manual frame updates
    ld [enable_man_frame_addr],A;
    // Send manual frame update to begin
    ld [man_frame_update_addr],A;
    // Enable only keyboard and frame interrupts
    call enable_only_kbfi;
    // Set DE to start of data
    ld DE,data_start_addr;
    // Enable interrupts
    ei;

main_loop:
    halt;
jp main_loop;

// Detect input and write to the data in RAM.
handle_input:
    push BC;
    push DE;
    push HL;

    // Set DE to end of data
    ld DE,data_start_addr;
    cursor_pos_loop:
        ld C,[DE];
        // Check first byte for end of data
        pss C0;
        jpz cursor_pos_loop_end;
        inc DE;

        // Check second byte for end of data
        ld C0,C1;
        pss C0;
        jpz cursor_pos_loop_end;
        inc DE;
    jp cursor_pos_loop;
    cursor_pos_loop_end:

    // Add/subtract input bytes to data
    call modify_data;

    pop HL;
    pop DE;
    pop BC;
ret;

// Read the data from RAM and draw it to the screen.
draw_screen:
    push BC;
    push DE;
    push HL;

    // HL = current screen write address.
    // DE = current RAM data address.
    ld HL,screen_start;
    ld DE,data_start_addr;

    // Read + print ASCII data, two bytes at a time, until null character    
    rzf;
    read_loop:
        ldi C,[DE];
        // Handle first char
        pss C0;
        jpz read_loop_end;
        call draw_byte;

        // Handle second char
        ld C0,C1;
        pss C0;
        jpz read_loop_end;
        call draw_byte;
    jp read_loop;
    read_loop_end:

    // Draw cursor at end
    push BC;
    push DE;
    // Set C0 to unknown character to make cursor
    ld C0,0xFF;
    call draw_byte;
    pop DE;
    pop BC;

    pop HL;
    pop DE;
    pop BC;
ret;

// Do newline if at end of line.
prep_bounded_char:
    push BC;

    // Set BC to row end
    push HL;
    call hl_row_end;
    ld BC, HL;
    pop HL;

    // Check if adding char would put HL past row end
    push HL;
    add HL,3:d;
    cmp BC,HL;
    // If HL > BC, do newline
    jpn do_newline;

    // Else, return HL to starting pos
    no_newline:
    pop HL;
    jp newline_done;

    // Do newline
    do_newline:
    ld BC,row_len;
    call newline;
    pop BC;
    newline_done:

    pop BC;
ret;

font_prep:
    ld BC,row_len;
    ld DE,colour;
ret;

enable_only_kbfi:
    push BC;
    ld BC,ie_register_addr;
    ld [BC],0b0000_0011:w;
    pop BC;
ret;

// Move HL to the start of this row.
hl_row_start:
    push BC;

    ld BC,HL;
    sub BC,screen_start;
    divu BC,row_len;
    sub HL,BC;

    pop BC;
ret;

// Move HL to the end of this row.
hl_row_end:
    add HL,row_len;
    call hl_row_start;
    dec HL;
ret;

// Draw the byte in C0 onto the screen.
draw_byte: 
    push BC;
    push DE;

    ld A0,C0;
    call font_prep;

    // Special case for newline
    cmp A0,10;
    jnz end_newline;
    call newline;
    jp done_byte;
    end_newline:

    // Else, is a char. Do a newline if at end of line.
    call prep_bounded_char;

    // Match ASCII with font character
    cmp A0,32;
    jnz end_space;
    call space;
    jp done_byte;
    end_space:

    cmp A0,33;
    jnz end_bang;
    call bang;
    jp done_byte;
    end_bang:

    cmp A0,34;
    jnz end_dbl_quote;
    call dbl_quote;
    jp done_byte;
    end_dbl_quote:

    cmp A0,35;
    jnz end_pound;
    call pound;
    jp done_byte;
    end_pound:

    cmp A0,36;
    jnz end_dollar;
    call dollar;
    jp done_byte;
    end_dollar:

    cmp A0,37;
    jnz end_percent;
    call percent;
    jp done_byte;
    end_percent:

    cmp A0,38;
    jnz end_ampersand;
    call ampersand;
    jp done_byte;
    end_ampersand:

    cmp A0,39;
    jnz end_single_quote;
    call single_quote;
    jp done_byte;
    end_single_quote:

    cmp A0,40;
    jnz end_open_paren;
    call open_paren;
    jp done_byte;
    end_open_paren:

    cmp A0,41;
    jnz end_close_paren;
    call close_paren;
    jp done_byte;
    end_close_paren:

    cmp A0,42;
    jnz end_asterisk;
    call asterisk;
    jp done_byte;
    end_asterisk:

    cmp A0,43;
    jnz end_plus;
    call plus;
    jp done_byte;
    end_plus:

    cmp A0,44;
    jnz end_comma;
    call comma;
    jp done_byte;
    end_comma:

    cmp A0,45;
    jnz end_hyphen;
    call hyphen;
    jp done_byte;
    end_hyphen:

    cmp A0,46;
    jnz end_period;
    call period;
    jp done_byte;
    end_period:

    cmp A0,47;
    jnz end_slash;
    call slash;
    jp done_byte;
    end_slash:

    cmp A0,48;
    jnz end_zero;
    call zero;
    jp done_byte;
    end_zero:

    cmp A0,49;
    jnz end_one;
    call one;
    jp done_byte;
    end_one:

    cmp A0,50;
    jnz end_two;
    call two;
    jp done_byte;
    end_two:

    cmp A0,51;
    jnz end_three;
    call three;
    jp done_byte;
    end_three:

    cmp A0,52;
    jnz end_four;
    call four;
    jp done_byte;
    end_four:

    cmp A0,53;
    jnz end_five;
    call five;
    jp done_byte;
    end_five:

    cmp A0,54;
    jnz end_six;
    call six;
    jp done_byte;
    end_six:

    cmp A0,55;
    jnz end_seven;
    call seven;
    jp done_byte;
    end_seven:

    cmp A0,56;
    jnz end_eight;
    call eight;
    jp done_byte;
    end_eight:

    cmp A0,57;
    jnz end_nine;
    call nine;
    jp done_byte;
    end_nine:

    cmp A0,58;
    jnz end_colon;
    call colon;
    jp done_byte;
    end_colon:

    cmp A0,59;
    jnz end_semicolon;
    call semicolon;
    jp done_byte;
    end_semicolon:

    cmp A0,60;
    jnz end_less_than;
    call less_than;
    jp done_byte;
    end_less_than:

    cmp A0,61;
    jnz end_equals;
    call equals;
    jp done_byte;
    end_equals:

    cmp A0,62;
    jnz end_greater_than;
    call greater_than;
    jp done_byte;
    end_greater_than:

    cmp A0,63;
    jnz end_question;
    call question;
    jp done_byte;
    end_question:

    cmp A0,64;
    jnz end_at_sign;
    call at_sign;
    jp done_byte;
    end_at_sign:

    cmp A0,65;
    jnz end_cap_a;
    call cap_a;
    jp done_byte;
    end_cap_a:

    cmp A0,66;
    jnz end_cap_b;
    call cap_b;
    jp done_byte;
    end_cap_b:

    cmp A0,67;
    jnz end_cap_c;
    call cap_c;
    jp done_byte;
    end_cap_c:

    cmp A0,68;
    jnz end_cap_d;
    call cap_d;
    jp done_byte;
    end_cap_d:

    cmp A0,69;
    jnz end_cap_e;
    call cap_e;
    jp done_byte;
    end_cap_e:

    cmp A0,70;
    jnz end_cap_f;
    call cap_f;
    jp done_byte;
    end_cap_f:

    cmp A0,71;
    jnz end_cap_g;
    call cap_g;
    jp done_byte;
    end_cap_g:

    cmp A0,72;
    jnz end_cap_h;
    call cap_h;
    jp done_byte;
    end_cap_h:

    cmp A0,73;
    jnz end_cap_i;
    call cap_i;
    jp done_byte;
    end_cap_i:

    cmp A0,74;
    jnz end_cap_j;
    call cap_j;
    jp done_byte;
    end_cap_j:

    cmp A0,75;
    jnz end_cap_k;
    call cap_k;
    jp done_byte;
    end_cap_k:

    cmp A0,76;
    jnz end_cap_l;
    call cap_l;
    jp done_byte;
    end_cap_l:

    cmp A0,77;
    jnz end_cap_m;
    call cap_m;
    jp done_byte;
    end_cap_m:

    cmp A0,78;
    jnz end_cap_n;
    call cap_n;
    jp done_byte;
    end_cap_n:

    cmp A0,79;
    jnz end_cap_o;
    call cap_o;
    jp done_byte;
    end_cap_o:

    cmp A0,80;
    jnz end_cap_p;
    call cap_p;
    jp done_byte;
    end_cap_p:

    cmp A0,81;
    jnz end_cap_q;
    call cap_q;
    jp done_byte;
    end_cap_q:

    cmp A0,82;
    jnz end_cap_r;
    call cap_r;
    jp done_byte;
    end_cap_r:

    cmp A0,83;
    jnz end_cap_s;
    call cap_s;
    jp done_byte;
    end_cap_s:

    cmp A0,84;
    jnz end_cap_t;
    call cap_t;
    jp done_byte;
    end_cap_t:

    cmp A0,85;
    jnz end_cap_u;
    call cap_u;
    jp done_byte;
    end_cap_u:

    cmp A0,86;
    jnz end_cap_v;
    call cap_v;
    jp done_byte;
    end_cap_v:

    cmp A0,87;
    jnz end_cap_w;
    call cap_w;
    jp done_byte;
    end_cap_w:

    cmp A0,88;
    jnz end_cap_x;
    call cap_x;
    jp done_byte;
    end_cap_x:

    cmp A0,89;
    jnz end_cap_y;
    call cap_y;
    jp done_byte;
    end_cap_y:

    cmp A0,90;
    jnz end_cap_z;
    call cap_z;
    jp done_byte;
    end_cap_z:

    cmp A0,91;
    jnz end_open_bracket;
    call open_bracket;
    jp done_byte;
    end_open_bracket:

    cmp A0,92;
    jnz end_backslash;
    call backslash;
    jp done_byte;
    end_backslash:

    cmp A0,93;
    jnz end_close_bracket;
    call close_bracket;
    jp done_byte;
    end_close_bracket:

    cmp A0,94;
    jnz end_caret;
    call caret;
    jp done_byte;
    end_caret:

    cmp A0,95;
    jnz end_underscore;
    call underscore;
    jp done_byte;
    end_underscore:

    cmp A0,96;
    jnz end_backtick;
    call backtick;
    jp done_byte;
    end_backtick:

    cmp A0,97;
    jnz end_a;
    call a;
    jp done_byte;
    end_a:

    cmp A0,98;
    jnz end_b;
    call b;
    jp done_byte;
    end_b:

    cmp A0,99;
    jnz end_c;
    call c;
    jp done_byte;
    end_c:

    cmp A0,100;
    jnz end_d;
    call d;
    jp done_byte;
    end_d:

    cmp A0,101;
    jnz end_e;
    call e;
    jp done_byte;
    end_e:

    cmp A0,102;
    jnz end_f;
    call f;
    jp done_byte;
    end_f:

    cmp A0,103;
    jnz end_g;
    call g;
    jp done_byte;
    end_g:

    cmp A0,104;
    jnz end_h;
    call h;
    jp done_byte;
    end_h:

    cmp A0,105;
    jnz end_i;
    call i;
    jp done_byte;
    end_i:

    cmp A0,106;
    jnz end_j;
    call j;
    jp done_byte;
    end_j:

    cmp A0,107;
    jnz end_k;
    call k;
    jp done_byte;
    end_k:

    cmp A0,108;
    jnz end_l;
    call l;
    jp done_byte;
    end_l:

    cmp A0,109;
    jnz end_m;
    call m;
    jp done_byte;
    end_m:

    cmp A0,110;
    jnz end_n;
    call n;
    jp done_byte;
    end_n:

    cmp A0,111;
    jnz end_o;
    call o;
    jp done_byte;
    end_o:

    cmp A0,112;
    jnz end_p;
    call p;
    jp done_byte;
    end_p:

    cmp A0,113;
    jnz end_q;
    call q;
    jp done_byte;
    end_q:

    cmp A0,114;
    jnz end_r;
    call r;
    jp done_byte;
    end_r:

    cmp A0,115;
    jnz end_s;
    call s;
    jp done_byte;
    end_s:

    cmp A0,116;
    jnz end_t;
    call t;
    jp done_byte;
    end_t:

    cmp A0,117;
    jnz end_u;
    call u;
    jp done_byte;
    end_u:

    cmp A0,118;
    jnz end_v;
    call v;
    jp done_byte;
    end_v:

    cmp A0,119;
    jnz end_w;
    call w;
    jp done_byte;
    end_w:

    cmp A0,120;
    jnz end_x;
    call x;
    jp done_byte;
    end_x:

    cmp A0,121;
    jnz end_y;
    call y;
    jp done_byte;
    end_y:

    cmp A0,122;
    jnz end_z;
    call z;
    jp done_byte;
    end_z:

    cmp A0,123;
    jnz end_open_brace;
    call open_brace;
    jp done_byte;
    end_open_brace:

    cmp A0,124;
    jnz end_bar;
    call bar;
    jp done_byte;
    end_bar:

    cmp A0,125;
    jnz end_close_brace;
    call close_brace;
    jp done_byte;
    end_close_brace:

    cmp A0,126;
    jnz end_tilde;
    call tilde;
    jp done_byte;
    end_tilde:

    // Unknown character
    call unknown;

    done_byte:
    pop DE;
    pop BC;
ret;

// Match kb register and append the resulting ASCII to RAM at cursor location DE.
modify_data:
    ld C,kb_return;
    call check_scancode;
    jpz skip_return;
    call de_wb;
    skip_return:

    ld C,kb_return2;
    call check_scancode;
    jpz skip_return2;
    call de_wb;
    skip_return2:


    ld C,kb_backspace;
    call check_scancode;
    jpz skip_backspace;
    call de_db;
    skip_backspace:

    ld C,kb_a;
    call check_scancode;
    jpz skip_a;
    call de_wb;
    skip_a:

    ld C,kb_b;
    call check_scancode;
    jpz skip_b;
    call de_wb;
    skip_b:

    ld C,kb_c;
    call check_scancode;
    jpz skip_c;
    call de_wb;
    skip_c:

    ld C,kb_d;
    call check_scancode;
    jpz skip_d;
    call de_wb;
    skip_d:

    ld C,kb_e;
    call check_scancode;
    jpz skip_e;
    call de_wb;
    skip_e:

    ld C,kb_f;
    call check_scancode;
    jpz skip_f;
    call de_wb;
    skip_f:

    ld C,kb_g;
    call check_scancode;
    jpz skip_g;
    call de_wb;
    skip_g:

    ld C,kb_h;
    call check_scancode;
    jpz skip_h;
    call de_wb;
    skip_h:

    ld C,kb_i;
    call check_scancode;
    jpz skip_i;
    call de_wb;
    skip_i:

    ld C,kb_j;
    call check_scancode;
    jpz skip_j;
    call de_wb;
    skip_j:

    ld C,kb_k;
    call check_scancode;
    jpz skip_k;
    call de_wb;
    skip_k:

    ld C,kb_l;
    call check_scancode;
    jpz skip_l;
    call de_wb;
    skip_l:

    ld C,kb_m;
    call check_scancode;
    jpz skip_m;
    call de_wb;
    skip_m:

    ld C,kb_n;
    call check_scancode;
    jpz skip_n;
    call de_wb;
    skip_n:

    ld C,kb_o;
    call check_scancode;
    jpz skip_o;
    call de_wb;
    skip_o:

    ld C,kb_p;
    call check_scancode;
    jpz skip_p;
    call de_wb;
    skip_p:

    ld C,kb_q;
    call check_scancode;
    jpz skip_q;
    call de_wb;
    skip_q:

    ld C,kb_r;
    call check_scancode;
    jpz skip_r;
    call de_wb;
    skip_r:

    ld C,kb_s;
    call check_scancode;
    jpz skip_s;
    call de_wb;
    skip_s:

    ld C,kb_t;
    call check_scancode;
    jpz skip_t;
    call de_wb;
    skip_t:

    ld C,kb_u;
    call check_scancode;
    jpz skip_u;
    call de_wb;
    skip_u:

    ld C,kb_v;
    call check_scancode;
    jpz skip_v;
    call de_wb;
    skip_v:

    ld C,kb_w;
    call check_scancode;
    jpz skip_w;
    call de_wb;
    skip_w:

    ld C,kb_x;
    call check_scancode;
    jpz skip_x;
    call de_wb;
    skip_x:

    ld C,kb_y;
    call check_scancode;
    jpz skip_y;
    call de_wb;
    skip_y:

    ld C,kb_z;
    call check_scancode;
    jpz skip_z;
    call de_wb;
    skip_z:

    ld C,kb_num0;
    call check_scancode;
    jpz skip_num0;
    call de_wb;
    skip_num0:

    ld C,kb_num1;
    call check_scancode;
    jpz skip_num1;
    call de_wb;
    skip_num1:

    ld C,kb_num2;
    call check_scancode;
    jpz skip_num2;
    call de_wb;
    skip_num2:

    ld C,kb_num3;
    call check_scancode;
    jpz skip_num3;
    call de_wb;
    skip_num3:

    ld C,kb_num4;
    call check_scancode;
    jpz skip_num4;
    call de_wb;
    skip_num4:

    ld C,kb_num5;
    call check_scancode;
    jpz skip_num5;
    call de_wb;
    skip_num5:

    ld C,kb_num6;
    call check_scancode;
    jpz skip_num6;
    call de_wb;
    skip_num6:

    ld C,kb_num7;
    call check_scancode;
    jpz skip_num7;
    call de_wb;
    skip_num7:

    ld C,kb_num8;
    call check_scancode;
    jpz skip_num8;
    call de_wb;
    skip_num8:

    ld C,kb_num9;
    call check_scancode;
    jpz skip_num9;
    call de_wb;
    skip_num9:

    ld C,kb_space;
    call check_scancode;
    jpz skip_space;
    call de_wb;
    skip_space:

    ld C,kb_minus;
    call check_scancode;
    jpz skip_minus;
    call de_wb;
    skip_minus:

    ld C,kb_equals;
    call check_scancode;
    jpz skip_equals;
    call de_wb;
    skip_equals:

    ld C,kb_leftbracket;
    call check_scancode;
    jpz skip_leftbracket;
    call de_wb;
    skip_leftbracket:

    ld C,kb_rightbracket;
    call check_scancode;
    jpz skip_rightbracket;
    call de_wb;
    skip_rightbracket:

    ld C,kb_backslash;
    call check_scancode;
    jpz skip_backslash;
    call de_wb;
    skip_backslash:

    ld C,kb_semicolon;
    call check_scancode;
    jpz skip_semicolon;
    call de_wb;
    skip_semicolon:

    ld C,kb_apostrophe;
    call check_scancode;
    jpz skip_apostrophe;
    call de_wb;
    skip_apostrophe:

    ld C,kb_grave;
    call check_scancode;
    jpz skip_grave;
    call de_wb;
    skip_grave:

    ld C,kb_comma;
    call check_scancode;
    jpz skip_comma;
    call de_wb;
    skip_comma:

    ld C,kb_period;
    call check_scancode;
    jpz skip_period;
    call de_wb;
    skip_period:

    ld C,kb_slash;
    call check_scancode;
    jpz skip_slash;
    call de_wb;
    skip_slash:
ret;

// Decrement DE and delete the byte at that location.
de_db:
    push BC;

    dec DE;
    ld B,[DE];
    ld B0,0;
    ld [DE],B;

    pop BC;
ret;

// Write the ASCII byte corresponding to scancode C at DE, incrementing DE afterwards.
de_wb:
    push BC;

    call scancode_to_ascii;

    ld B,[DE];
    ld B1,C1;
    ld [DE],C;
    inc DE;

    pop BC;
ret;
