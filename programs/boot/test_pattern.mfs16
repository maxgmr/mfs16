// The MFS-16 colour test pattern.
row_len = 0x140:d;

// Set HL = top-left corner of test pattern location on screen.
// Messes with A.
draw_test_pattern:
    push HL;
    push DE;
    push BC;

    // Add/sub DE to/from HL to move down/up a row on the screen
    ld DE,row_len;

    // Push test pattern start to stack again
    push HL;

    // Black square
    ld BC,0x0000_0000:d;
    call draw_square;

    add HL,8:d;

    // Red square
    ld BC,0x1111_1111:d;
    call draw_square;

    add HL,8:d;

    // Green square
    ld BC,0x2222_2222:d;
    call draw_square;

    add HL,8:d;

    // Yellow square
    ld BC,0x3333_3333:d;
    call draw_square;

    add HL,8:d;

    // Blue square
    ld BC,0x4444_4444:d;
    call draw_square;

    add HL,8:d;

    // Magenta square
    ld BC,0x5555_5555:d;
    call draw_square;

    add HL,8:d;

    // Cyan square
    ld BC,0x6666_6666:d;
    call draw_square;

    add HL,8:d;

    // White square
    ld BC,0x7777_7777:d;
    call draw_square;

    // Move back to start of test pattern
    pop HL;

    // Move down 16 rows
    push DE;
    mulu DE,16:d;
    add HL,DE;
    pop DE;

    // Bright black square
    ld BC,0x8888_8888:d;
    call draw_square;

    add HL,8:d;

    // Bright red square
    ld BC,0x9999_9999:d;
    call draw_square;

    add HL,8:d;

    // Bright green square
    ld BC,0xAAAA_AAAA:d;
    call draw_square;

    add HL,8:d;

    // Bright yellow square
    ld BC,0xBBBB_BBBB:d;
    call draw_square;

    add HL,8:d;

    // Bright blue square
    ld BC,0xCCCC_CCCC:d;
    call draw_square;

    add HL,8:d;

    // Bright magenta square
    ld BC,0xDDDD_DDDD:d;
    call draw_square;

    add HL,8:d;

    // Bright cyan square
    ld BC,0xEEEE_EEEE:d;
    call draw_square;

    add HL,8:d;

    // Bright white square
    ld BC,0xFFFF_FFFF:d;
    call draw_square;
    
    pop BC;
    pop DE;
    pop HL;
ret;

// Draw 16x16 square.
// Set HL = start of square, BC = colour, DE = row_len
draw_square:
    ld A,16:w;
    pss A;
    draw_row_loop:
        jpz draw_row_loop_end;
        call draw_row;
        dec A;
        jp draw_row_loop;
    draw_row_loop_end:

    // Move HL back to start
    push DE;
    mulu DE,16:d;
    sub HL,DE;
    pop DE;

ret;

// Draw 16-pixel-long row, then move HL 1 row down.
// Set HL = start of row, BC = colour, DE = row_len
draw_row:
    vldi [HL],BC;
    vldd [HL],BC;
    add HL,DE;
ret;
